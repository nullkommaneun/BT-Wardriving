class IDBLayer{constructor(){this.db=null}async init(){return new Promise((res,rej)=>{if(!('indexedDB'in window))return rej(new Error('IndexedDB nicht verfügbar'));const req=indexedDB.open('ble-scans-db',2);req.onupgradeneeded=()=>{const db=req.result;if(!db.objectStoreNames.contains('records'))db.createObjectStore('records',{keyPath:'timestamp'})};req.onsuccess=()=>{this.db=req.result;res()};req.onerror=()=>rej(req.error)})}async add(r){return new Promise((res,rej)=>{const tx=this.db.transaction('records','readwrite');tx.objectStore('records').put(r);tx.oncomplete=()=>res();tx.onerror=()=>rej(tx.error)})}async getAll(){return new Promise((res,rej)=>{const tx=this.db.transaction('records','readonly');const store=tx.objectStore('records');const req=store.getAll?store.getAll():store.openCursor();if(store.getAll){req.onsuccess=()=>res(req.result||[]);req.onerror=()=>rej(req.error)}else{const out=[];const cur=store.openCursor();cur.onsuccess=e=>{const c=e.target.result;if(c){out.push(c.value);c.continue()}else res(out)};cur.onerror=()=>rej(cur.error)}})}async clear(){return new Promise((res,rej)=>{const tx=this.db.transaction('records','readwrite');tx.objectStore('records').clear();tx.oncomplete=()=>res();tx.onerror=()=>rej(tx.error)})}}class LSLayer{constructor(){this.prefix='ble-scan:'}async init(){if(!('localStorage'in window))throw new Error('LocalStorage nicht verfügbar')}async add(r){localStorage.setItem(this.prefix+r.timestamp,JSON.stringify(r))}async getAll(){const out=[];for(let i=0;i<localStorage.length;i++){const k=localStorage.key(i);if(k&&k.startsWith(this.prefix))try{out.push(JSON.parse(localStorage.getItem(k)))}catch{}}out.sort((a,b)=>a.timestamp.localeCompare(b.timestamp));return out}async clear(){const keys=[];for(let i=0;i<localStorage.length;i++){const k=localStorage.key(i);if(k&&k.startsWith(this.prefix))keys.push(k)}keys.forEach(k=>localStorage.removeItem(k))}}export class StorageManager{constructor(s=()=>{}){this.layer=null;this.memory=[];this.statusCb=s}async init(){try{const idb=new IDBLayer();await idb.init();this.layer=idb;this.statusCb('Speicherung: IndexedDB aktiv.');return}catch(e){this.statusCb('IndexedDB nicht verfügbar, versuche LocalStorage…')}try{const ls=new LSLayer();await ls.init();this.layer=ls;this.statusCb('Speicherung: LocalStorage aktiv.');return}catch(e){this.layer=null;this.statusCb('Speicherung nicht verfügbar. Arbeit im RAM (flüchtig).')}}async add(r){try{if(this.layer)return await this.layer.add(r);this.memory.push(r)}catch(e){this.statusCb(`Speicherfehler: ${e.message}. Arbeit im RAM.`);this.layer=null;this.memory.push(r)}}async getAll(){if(this.layer){try{return await this.layer.getAll()}catch{}}return[...this.memory]}async clear(){if(this.layer){try{await this.layer.clear()}catch{}}this.memory=[]}}